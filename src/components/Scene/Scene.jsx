/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/scene.glb 
*/

import React, { useEffect } from "react";
import { useGLTF, useTexture, useVideoTexture } from "@react-three/drei";
import { motion } from "framer-motion-3d";
// import * as THREE from "three";
import { MeshStandardMaterial, sRGBEncoding } from "three";
import { animate, useMotionValue } from "framer-motion";
import { useFrame } from "@react-three/fiber";

export function Scene(props) {
  const { section } = props;
  const { nodes, materials } = useGLTF("models/mainscene.glb");
  const textureVSCode = useVideoTexture("textures/videoF.mp4");
  const textureVSCode2 = useVideoTexture("textures/videoD.mp4");

  //Cat Texture
  const cattexture = useTexture("textures/Princess_Base_Color.png");
  cattexture.flipY = false;
  cattexture.encoding = sRGBEncoding;

  const catTextureMaterial = new MeshStandardMaterial({
    map: cattexture,
    transparent: true,
    opacity: 1,
  });
  const catTextureOpacity = useMotionValue(0);

  // Room & Components Texture
  const roomTexture = useTexture("textures/ISOCompRoom_Base_Color.png");
  roomTexture.flipY = false;
  roomTexture.encoding = sRGBEncoding;

  const roomTextureMaterial = new MeshStandardMaterial({
    map: roomTexture,
    transparent: true,
    opacity: 1,
  });
  const roomTextureOpacity = useMotionValue(0);

  //GuitaleleColor texture
  const texture1 = useTexture("textures/GuitaleleColor.png");
  texture1.flipY = false;
  texture1.encoding = sRGBEncoding;

  const TextureMaterial1 = new MeshStandardMaterial({
    map: texture1,
    transparent: true,
    opacity: 1,
  });
  const Texture1_Opacity = useMotionValue(0);

  //GuntherBaseColor
  // const texture2 = useTexture("textures/GuntherBaseColor.png");
  // texture2.flipY = false;
  // texture2.encoding = sRGBEncoding;
  // const TextureMaterial2 = new MeshStandardMaterial({
  //   map: texture2,
  //   transparent: true,
  //   opacity: 1,
  // });
  // const Texture2_Opacity = useMotionValue(0);

  // const glassTexture = useTexture("textures/ISOCompRoom_Base_Color.png");
  // glassTexture.flipY = false;
  // glassTexture.encoding = sRGBEncoding;
  // const glassTextureMaterial = new MeshStandardMaterial({
  //   map: glassTexture,
  //   transparent: true,
  //   opacity: 0.42,
  // });
  // const glassTextureOpacity = useMotionValue(0);

  useEffect(() => {
    animate(catTextureOpacity, section === 0 ? 1 : 0, {
      duration: 0.6,
    });
    animate(roomTextureOpacity, section === 0 ? 1 : 0, {
      duration: 0.6,
    });
    animate(Texture1_Opacity, section === 0 ? 1 : 0, {
      duration: 0.6,
    });
    // animate(Texture2_Opacity, section === 0 ? 1 : 0, {
    //   duration: 0.6,
    // });
    // animate(glassTextureOpacity, section === 0 ? 0.42 : 0, {
    //   duration: 0.6,
    // });
  }, [section]);

  useFrame(() => {
    catTextureMaterial.opacity = catTextureOpacity.get();
    roomTextureMaterial.opacity = roomTextureOpacity.get();
    TextureMaterial1.opacity = Texture1_Opacity.get();
    // TextureMaterial2.opacity = Texture2_Opacity.get();
    // glassTextureMaterial.opacity = glassTextureOpacity.get();
  });

  return (
    <group {...props} dispose={null}>
      <group name="Scene">
        <group
          name="CharacterSpot"
          position={[-0.037, 0.052, -0.187]}
          rotation={[-Math.PI, 0.29, -Math.PI]}
          scale={0.847}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.ScreenF.geometry}
          position={[0.107, 0.895, -0.902]}
          rotation={[0, 0.038, 0]}
        >
          <meshBasicMaterial map={textureVSCode} toneMapped={false} />
        </motion.mesh>

        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.ScreenD.geometry}
          position={[-0.352, 0.883, -0.785]}
          rotation={[0, 0.755, 0]}
        >
          <meshBasicMaterial map={textureVSCode2} toneMapped={false} />
        </motion.mesh>

        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.WallsandFloor.geometry}
          material={roomTextureMaterial}
          position={[0, 1.007, 0]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.Seat.geometry}
          material={roomTextureMaterial}
          position={[-0.058, 0.386, -0.202]}
          rotation={[Math.PI, -1.223, Math.PI]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.ChairBase.geometry}
          material={roomTextureMaterial}
          position={[-0.072, 0.078, -0.226]}
          rotation={[0, 0.446, 0]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.ChairArms.geometry}
          material={roomTextureMaterial}
          position={[-0.054, 0.491, -0.213]}
          rotation={[Math.PI, -1.218, Math.PI]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.ChairStand.geometry}
          material={roomTextureMaterial}
          position={[-0.053, 0.221, -0.215]}
          rotation={[Math.PI, -1.52, Math.PI]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.ChairWheels.geometry}
          material={roomTextureMaterial}
          position={[-0.02, 0.03, -0.023]}
          rotation={[2.257, -0.176, 1.342]}
        />
        <motion.mesh
          // scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1.167 : 0,
          }}
          geometry={nodes.Keyboard.geometry}
          material={roomTextureMaterial}
          position={[0.056, 0.662, -0.718]}
          rotation={[Math.PI, -1.525, Math.PI]}
          scale={1.167}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.Monitorstand2.geometry}
          material={roomTextureMaterial}
          position={[-0.364, 0.671, -0.79]}
          rotation={[0.022, 0.758, -0.017]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.Monitorstand.geometry}
          material={roomTextureMaterial}
          position={[0.134, 0.671, -0.919]}
          rotation={[0.016, -0.003, -0.002]}
        />
        <motion.mesh
          scale={[1.052, 1.23, 1.052]}
          animate={{
            scale: section === 0 ? [1.052, 1.23, 1.052] : 0,
          }}
          geometry={nodes.Mouse.geometry}
          material={roomTextureMaterial}
          position={[0.365, 0.662, -0.7]}
          rotation={[0, -0.121, 0]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.Computer.geometry}
          material={roomTextureMaterial}
          position={[0.461, 0.212, -0.705]}
          rotation={[Math.PI, -1.556, Math.PI]}
        />
        <mesh
          geometry={nodes.Desk.geometry}
          material={roomTextureMaterial}
          position={[0.055, 0.313, -0.791]}
          rotation={[0, 0.025, 0]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.MonitorDiagonal.geometry}
          material={roomTextureMaterial}
          position={[-0.352, 0.883, -0.785]}
          rotation={[0, 0.755, 0]}
        />
        {/* <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.MonitorForward.geometry}
          material={roomTextureMaterial}
          position={[0.107, 0.895, -0.902]}
          rotation={[0, 0.038, 0]}
        /> */}
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.MonitorForward.geometry}
          material={roomTextureMaterial}
          position={[0.107, 0.895, -0.902]}
          rotation={[0, 0.038, 0]}
        />

        <mesh
          geometry={nodes.Curtain.geometry}
          material={roomTextureMaterial}
          position={[-0.02, 1.268, -0.975]}
          rotation={[1.575, 0, 0]}
        />
        <mesh
          geometry={nodes.CutainRings.geometry}
          material={roomTextureMaterial}
          position={[0.297, 1.903, -0.967]}
          rotation={[1.153, 0.099, -1.635]}
        />
        <mesh
          geometry={nodes.Rod.geometry}
          material={roomTextureMaterial}
          position={[-0.007, 1.904, -0.973]}
          rotation={[0, 0, -Math.PI / 2]}
        />
        <mesh
          geometry={nodes.Ottoman.geometry}
          material={roomTextureMaterial}
          position={[-0.74, 0.19, -0.014]}
          rotation={[0, 1.562, 0]}
        />
        <mesh
          geometry={nodes.FloorLamp.geometry}
          material={roomTextureMaterial}
          position={[-0.817, 0.639, -0.789]}
        />
        <mesh
          geometry={nodes.FantPase.geometry}
          material={roomTextureMaterial}
          position={[0.009, 1.944, 0]}
        />
        <mesh
          geometry={nodes.FanBlades.geometry}
          material={roomTextureMaterial}
          position={[0.009, 1.944, 0]}
          rotation={[0, -0.126, 0]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.SideTable.geometry}
          material={roomTextureMaterial}
          position={[-0.738, 0.478, 0.741]}
          rotation={[-Math.PI, 0.954, -Math.PI]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.FoodStand.geometry}
          material={roomTextureMaterial}
          position={[0.735, 0.02, 0.099]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.FoodBowl.geometry}
          material={roomTextureMaterial}
          position={[0.738, 0.039, -0.032]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.WaterBowl.geometry}
          material={roomTextureMaterial}
          position={[0.738, 0.039, 0.212]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.ScratchpostBase.geometry}
          material={TextureMaterial1}
          position={[0.823, 0.02, -0.777]}
          rotation={[0, 1.537, 0]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.ScratchPost.geometry}
          material={TextureMaterial1}
          position={[0.815, 0.353, -0.773]}
          rotation={[0, 1.056, 0]}
        />
        <motion.mesh
          scale={[0, 0, 0]}
          animate={{
            scale: section === 0 ? 1 : 0,
          }}
          geometry={nodes.Cup.geometry}
          material={TextureMaterial1}
          position={[0.434, 0.693, -0.856]}
          rotation={[Math.PI, -0.078, Math.PI]}
        />
        <mesh
          geometry={nodes.Pillow.geometry}
          material={roomTextureMaterial}
          position={[-0.914, 0.525, -0.123]}
          rotation={[0.067, -0.298, 0.048]}
        />
        <mesh
          geometry={nodes.PrincessBody.geometry}
          material={catTextureMaterial}
          position={[-0.044, 0.129, 0.436]}
          rotation={[0, 0.456, 0]}
        />
        <mesh
          geometry={nodes.PrincessHead.geometry}
          material={catTextureMaterial}
          position={[-0.286, 0.109, 0.537]}
          rotation={[1.135, -1.011, 0.981]}
        />
        <mesh
          geometry={nodes.PrincessEars.geometry}
          material={catTextureMaterial}
          position={[-0.28, 0.093, 0.535]}
          rotation={[1.135, -1.011, 0.981]}
        />
        <mesh
          geometry={nodes.PrincessLegs.geometry}
          material={catTextureMaterial}
          position={[-0.053, 0.068, 0.446]}
          rotation={[0, 0.456, 0]}
        />
        <mesh
          geometry={nodes.PrincessTail.geometry}
          material={catTextureMaterial}
          position={[0.227, 0.092, 0.341]}
          rotation={[0.082, 0.026, 1.26]}
        />
        <mesh
          geometry={nodes.Bridge.geometry}
          material={TextureMaterial1}
          position={[-0.906, 1.074, 0.66]}
          rotation={[-2.37, 1.525, 2.382]}
        />
        <mesh
          geometry={nodes.Guitalele.geometry}
          material={TextureMaterial1}
          position={[-0.953, 1.158, 0.662]}
          rotation={[-2.37, 1.525, 2.382]}
        />
        <mesh
          geometry={nodes.Neck.geometry}
          material={TextureMaterial1}
          position={[-0.915, 1.418, 0.663]}
          rotation={[-2.37, 1.525, 0.811]}
        />
        <mesh
          geometry={nodes.Strings.geometry}
          material={TextureMaterial1}
          position={[-0.911, 1.35, 0.665]}
          rotation={[1.584, 0.049, -1.604]}
        />
        <mesh
          geometry={nodes.Tuner.geometry}
          material={TextureMaterial1}
          position={[-0.955, 1.588, 0.629]}
          rotation={[-2.37, 1.525, 2.382]}
        />
        <motion.mesh
          opacity={1}
          geometry={nodes.WallsandFloor001.geometry}
          material={materials["Material.005"]}
          // material={glassTextureMaterial}
          position={[0.001, 1.318, -1.099]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/mainscene.glb");
useTexture.preload("textures/Princess_Base_Color.png");
useTexture.preload("textures/ISOCompRoom_Base_Color.png");
useTexture.preload("textures/GuitaleleColor.png");

